import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.util.Streamable;
import org.springframework.util.Assert;

import java.util.Collections;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

public class CustomPageableExecutionUtils {

    public static <T> Page<T> getPage(List<T> content, Pageable pageable, Function<Long, Long> totalCountFunction) {
        Assert.notNull(content, "Content must not be null!");
        Assert.notNull(pageable, "Pageable must not be null!");
        Assert.notNull(totalCountFunction, "Total count function must not be null!");

        long totalCount = totalCountFunction.apply(pageable.getOffset());

        if (content.isEmpty()) {
            return new PageImpl<>(Collections.emptyList(), pageable, totalCount);
        }

        return new PageImpl<>(content, pageable, totalCount);
    }

    public static <T> Page<T> getPage(List<T> content, Pageable pageable, long total) {
        Assert.notNull(content, "Content must not be null!");
        Assert.notNull(pageable, "Pageable must not be null!");

        if (content.isEmpty()) {
            return new PageImpl<>(Collections.emptyList(), pageable, 0);
        }

        return new PageImpl<>(content, pageable, total);
    }

    public static <T> Page<T> getPage(Streamable<T> content, Pageable pageable, Function<Long, Long> totalCountFunction) {
        return getPage(content.stream().collect(Collectors.toList()), pageable, totalCountFunction);
    }

    public static <T> Page<T> getPage(Streamable<T> content, Pageable pageable, long total) {
        return getPage(content.stream().collect(Collectors.toList()), pageable, total);
    }

    public static <T> Page<T> getPage(List<T> content, Pageable pageable) {
        Assert.notNull(content, "Content must not be null!");
        Assert.notNull(pageable, "Pageable must not be null!");

        if (content.isEmpty()) {
            return new PageImpl<>(Collections.emptyList(), pageable, 0);
        }

        return new PageImpl<>(content, pageable, content.size());
    }

    public static <T> Page<T> getPage(Streamable<T> content, Pageable pageable) {
        return getPage(content.stream().collect(Collectors.toList()), pageable);
    }

    public static <T> Page<T> getPage(List<T> content) {
        Assert.notNull(content, "Content must not be null!");

        if (content.isEmpty()) {
            return new PageImpl<>(Collections.emptyList());
        }

        return new PageImpl<>(content);
    }

    public static <T> Page<T> getPage(Streamable<T> content) {
        return getPage(content.stream().collect(Collectors.toList()));
    }

    public static <T> List<T> getPageContent(Page<T> page) {
        Assert.notNull(page, "Page must not be null!");

        return page.getContent();
    }

    public static <T> long getTotalCount(Page<T> page) {
        Assert.notNull(page, "Page must not be null!");

        return page.getTotalElements();
    }

    public static Pageable createPageable(int start, int length, String sortColumn, Sort.Direction sortDirection) {
        int pageNumber = start / length;
        Sort sort = Sort.by(sortDirection, sortColumn);
        return PageRequest.of(pageNumber, length, sort);
    }
}
